#!/usr/bin/env python3
"""
Maintain an AWS IAM policy document by syncing it from a locally-stored file.

You must have ambient AWS credentials available (e.g. in the environment or a
credentials file) that have permission to manage IAM policies.

A full ARN is required instead of just a policy name to ensure you're working
against the correct AWS account.
"""
import argparse
import boto3
import json
from sys import argv, exit, stderr
from textwrap import indent
from typing import List


# The boto3 "resource" module for IAM is much nicer to use than the lower-level
# client, but it's missing easy access to exceptions so bodge those in.
IAM = boto3.resource("iam")
IAM.exceptions = boto3.client("iam").exceptions


def main(args: List[str]) -> int:
    argparser = argparse.ArgumentParser(description = __doc__)

    argparser.add_argument(
        "policy",
        metavar = "<arn>",
        help = "Policy ARN, e.g. arn:aws:iam::${accountId}:policy/${name}",
        type = IAM.Policy)

    argparser.add_argument(
        "document",
        metavar = "<document.json>",
        help = "Policy document (JSON) file",
        type = load_json)

    argparser.add_argument(
        "--dry-run",
        help = "Go through the motions but don't actually make any changes to the policy on AWS.  This is the default.",
        action = "store_true",
        default = True)

    argparser.add_argument(
        "--wet-run",
        dest = "dry_run",
        help = "Actually make changes to the policy on AWS.",
        action = "store_false")

    opts = argparser.parse_args(args)

    return sync(opts.policy, opts.document, opts.dry_run)


def sync(policy: IAM.Policy, document: dict, dry_run: bool = True):
    def log(msg):
        print(indent(msg, f"DRY RUN | ") if dry_run else msg, file = stderr)

    # Load will happen automatically, but doing it explicitly makes for clearer
    # stacktraces if the policy doesn't exist or permission is denied.
    policy.load()

    # We're done if the current default version is the same.
    if document == policy.default_version.document:
        log(f"Nothing to do; document matches the current default version ({policy.default_version_id}) of {policy.arn}.")
        return 0
    else:
        log(f"Document differs from current default version ({policy.default_version_id}) of {policy.arn}.")

    # Ok, they're different in some way, so create a new default version.
    if dry_run:
        log(f"Would create new version of {policy.arn}; stopping now because of --dry-run.")
        log(f"Run again with --wet-run to proceed.")
        return 0
    else:
        log(f"Creating new version of {policy.arn}")

    try:
        new_version = policy.create_version(
            PolicyDocument = encode_json(document),
            SetAsDefault = True)

    except IAM.exceptions.LimitExceededException:
        # Remove oldest version
        not_default = lambda policy: not policy.is_default_version
        oldest_version = next(reversed([*filter(not_default, [*policy.versions.all()])]), None)

        if oldest_version:
            log(f"Deleting oldest version ({oldest_version.version_id}) of {policy.arn}")
            oldest_version.delete()

        # Try again!
        new_version = policy.create_version(
            PolicyDocument = encode_json(document),
            SetAsDefault = True)

    log(f"Created version {new_version.version_id} of {policy.arn}")

    return 0


def load_json(filename):
    with open(filename, "rb") as file:
        return json.load(file)


def encode_json(obj):
    return json.dumps(obj, allow_nan = False)


if __name__ == "__main__":
    exit(main(argv[1:]))
